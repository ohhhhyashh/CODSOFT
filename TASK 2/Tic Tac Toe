import math

def evaluate(board):
    """Evaluates the current state of the board.

    Returns:
        int: 1 if player X wins, -1 if player O wins, 0 for a tie or ongoing game.
    """

    for row in range(3):
        if board[row][0] == board[row][1] == board[row][2] != 0:
            return board[row][0]
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] != 0:
            return board[0][col]
    
    if board[0][0] == board[1][1] == board[2][2] != 0:
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] != 0:
        return board[0][2]

    if all(all(cell != 0 for cell in row) for row in board):
        return 0

    return None

def minimax(board, depth, is_maximizing, alpha, beta):
    """Implements the Minimax algorithm with alpha-beta pruning.

    Args:
        board (list): The current state of the board.
        depth (int): The current depth of the search.
        is_maximizing (bool): Whether it's the maximizing player's turn.
        alpha (int): The best value that the maximizing player can guarantee.
        beta (int): The best value that the minimizing player can guarantee.

    Returns:
        int: The best possible score for the current player.
    """

    score = evaluate(board)
    if score is not None:
        return score

    if depth == 0:
        return 0

    if is_maximizing:
        best_val = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == 0:
                    board[i][j] = 1 
                    value = minimax(board, depth - 1, False, alpha, beta)
                    board[i][j] = 0 
                    best_val = max(best_val, value)
                    alpha = max(alpha, best_val)
                    if beta <= alpha:
                        break
        return best_val
    else:
        best_val = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == 0:
                    board[i][j] = -1 
                    value = minimax(board, depth - 1, True, alpha, beta)
                    board[i][j] = 0 
                    best_val = min(best_val, value)
                    beta = min(beta, best_val)
                    if beta <= alpha:
                        break
        return best_val

def find_best_move(board):
    """Finds the best move for the AI player.

    Args:
        board (list): The current state of the board.

    Returns:
        tuple: The best row and column for the AI's move.
    """

    best_val = -math.inf
    best_move = (-1, -1)
    alpha = -math.inf
    beta = math.inf
    for i in range(3):
        for j in range(3):
            if board[i][j] == 0:
                board[i][j] = 1  
                move_val = minimax(board, 9, False, alpha, beta) 
                board[i][j] = 0
                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val
                alpha = max(alpha, best_val)
    return best_move

board = [[0, 0, 0],
         [0, 0, 0],
         [0, 0, 0]]

while True:
    row, col = map(int, input("Enter your move (row, col): ").split())
    if board[row][col] != 0:
        print("Invalid move, try again.")
        continue
    board[row][col] = -1 
    result = evaluate(board)
    if result == -1:
        print("You win!")
        break
    elif result == 0:
        print("It's a tie!")
        break

    row, col = find_best_move(board)
    board[row][col] = 1 

    for row in board:
        print(row)
    result = evaluate(board)
    if result == 1:
        print("AI wins!")
        break
    elif result == 0:
        print("It's a tie!")
        break
